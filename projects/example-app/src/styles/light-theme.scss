@use '@angular/material' as mat;

$my-org-blue-palette: (
  50: #eff6ff,
  100: #dbeafe,
  200: #bfdbfe,
  300: #93c5fd,
  400: #60a5fa,
  500: #3b82f6,
  600: #4c74db,
  700: #2852c8,
  800: #2144a6,
  900: #1d3c91,
  contrast: (
    50: #000,
    100: #000,
    200: #000,
    300: #000,
    400: #000,
    500: #fff,
    600: #fff,
    700: #fff,
    800: #fff,
    900: #fff,
  ),
);
// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$example-app-primary: mat.define-palette($my-org-blue-palette, 700, 600, 900);
$example-app-accent: mat.define-palette(mat.$blue-palette, A400, A100, A700);

// The warn palette is optional (defaults to red).
$example-app-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$example-app-theme: mat.define-light-theme(
  (
    color: (
      primary: $example-app-primary,
      accent: $example-app-accent,
      warn: $example-app-warn,
    ),
  )
);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($example-app-theme);
